# Import necessary libraries
import pandas as pd
import re
import requests
from PIL import Image
from PIL.ExifTags import TAGS
import io
import ast

# Load the cleaned dataset
df_5core = pd.read_csv("amazon_fashion_5core_cleaned.csv")
df_meta = pd.read_csv("amazon_fashion_metadata_cleaned.csv")

## Check for potential PII in reviewerName and reviewText
### Function to check if a name is likely a full name
def is_full_name(name):
    name = str(name).strip()
    
    ### Ensure at least two words as it is likely a full name (excluding initials like "B.")
    parts = name.split()
    
    ### If only one word, it's not a full name
    if len(parts) < 2:
        return False
    
    ### Check if the last word is an initial (e.g., "B.")
    if re.match(r"^[A-Z]\.$", parts[-1]): 
        return False

    ### Allow names with at least two alphabetic words
    return all(re.match(r"^[A-Za-z-]+$", part) for part in parts)

### Apply PII detection function for reviewer names
df_5core['potential_PII_name'] = df_5core['reviewerName'].apply(is_full_name)

### Filter potential PII names
pii_names = df_5core[df_5core['potential_PII_name']]
print("Potential PII in reviewerName:")
print(pii_names[['reviewerName']])

### Function to detect emails
def contains_email(text):
    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    return bool(re.search(email_pattern, str(text)))

### Function to detect phone numbers (US format example, modify for other regions)
def contains_phone(text):
    phone_pattern = r'(\+?\d{1,3}[-.\s]?)?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}'
    return bool(re.search(phone_pattern, str(text)))

### Apply PII detection functions for reviewer text
df_5core['contains_email'] = df_5core['reviewText'].apply(contains_email)
df_5core['contains_phone'] = df_5core['reviewText'].apply(contains_phone)

### Display PII-containing rows
pii_reviews = df_5core[(df_5core['contains_email']) | (df_5core['contains_phone'])]
if pii_reviews.empty:
    print("No potential PII found in reviewText.")
else:
    print("Potential PII in reviewText:")
    print(pii_reviews[['reviewText']])

# Function to extract EXIF data from an image in memory
def extract_exif_from_url(image_url):
    try:
        # Download image
        response = requests.get(image_url)
        if response.status_code == 200:
            image = Image.open(io.BytesIO(response.content))  # Open image from the bytes data
            exif_data = image._getexif()
            if exif_data:
                # Return EXIF data in readable format
                return {TAGS.get(tag, tag): value for tag, value in exif_data.items()}
            else:
                return None
        else:
            print(f"Failed to download image from {image_url}. Status code: {response.status_code}")
            return None
    except Exception as e:
        print(f"Error processing image {image_url}: {e}")
        return None

# Analyze the whole 'image' column from the dataframe (df_5core)
exif_results = []
for image_url in df_5core['image'].dropna():
    # Check if the value looks like a string representation of a list
    if isinstance(image_url, str) and image_url.startswith('[') and image_url.endswith(']'):
        try:
            # Convert string representation of list to actual list
            url_list = ast.literal_eval(image_url)
            if url_list and isinstance(url_list, list):
                image_url = url_list[0]  # Get the first URL from the list
                print(f"Extracted URL from string list: {image_url}")
        except (ValueError, SyntaxError):
            # If conversion fails, strip the brackets manually as fallback
            image_url = image_url.strip('[]').strip('\'\"')
            print(f"Manually extracted URL: {image_url}")
    
    # Now process with the clean URL
    exif_data = extract_exif_from_url(image_url)
    if exif_data:
        exif_results.append((image_url, exif_data))

# Print the EXIF metadata results
if exif_results:
    print("EXIF Metadata from the analyzed images:")
    for url, exif in exif_results:
        print(f"URL: {url}")
        print(f"EXIF: {exif}\n")
else:
    print("No EXIF metadata found in the images.")

